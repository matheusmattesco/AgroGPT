// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

public partial class MLModel2
{
    #region model input class
    public class ModelInput
    {
        public string Autor { get; set; }
        public string Nome { get; set; }
        public DateTime Data { get; set; }

        [ColumnName(@"N")]
        public float N { get; set; }

        [ColumnName(@"P")]
        public float P { get; set; }

        [ColumnName(@"K")]
        public float K { get; set; }

        [ColumnName(@"temperature")]
        public float Temperature { get; set; }

        [ColumnName(@"humidity")]
        public float Humidity { get; set; }

        [ColumnName(@"ph")]
        public float Ph { get; set; }

        [ColumnName(@"rainfall")]
        public float Rainfall { get; set; }

        [ColumnName(@"label")]
        public string Label { get; set; }

    }

    #endregion

    #region model output class
    public class ModelOutput
    {

        [Key]
        public int Id { get; set; }

        [ColumnName(@"N")]
        public float N { get; set; }

        [ColumnName(@"P")]
        public float P { get; set; }

        [ColumnName(@"K")]
        public float K { get; set; }

        [ColumnName(@"temperature")]
        public float Temperature { get; set; }

        [ColumnName(@"humidity")]
        public float Humidity { get; set; }

        [ColumnName(@"ph")]
        public float Ph { get; set; }

        [ColumnName(@"rainfall")]
        public float Rainfall { get; set; }

        [ColumnName(@"label")]
        public uint Label { get; set; }

        public string FeaturesJson { get; set; }
        [NotMapped]

        public float[] Features { get; set; }


        [ColumnName(@"PredictedLabel")]
        public string PredictedLabel { get; set; }

        public string ScoreJson { get; set; }
        [NotMapped]
        public float[] Score
        {
            get
            {
                if (!string.IsNullOrEmpty(ScoreJson))
                {
                    return JsonConvert.DeserializeObject<float[]>(ScoreJson);
                }
                return null; // Retorna nulo se ScoreJson for nulo ou vazio
            }
            set
            {
                ScoreJson = JsonConvert.SerializeObject(value);
            }
        }
        public string Autor { get; set; }
        public string Nome { get; set; }
        public DateTime Data { get; set; }

    }

    #endregion

    private static string MLNetModelPath = Path.GetFullPath("MLModel.zip");

    public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

    public static ModelOutput Predict(ModelInput input)
    {
        var predEngine = PredictEngine.Value;
        return predEngine.Predict(input);
    }

    private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
    {
        var mlContext = new MLContext();
        ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
        return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
    }
}
